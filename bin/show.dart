#! /usr/bin/env dcli

import 'dart:io';
import 'package:dcli/dcli.dart';

/// dcli script generated by:
/// dcli create show.dart
///
/// See
/// https://pub.dev/packages/dcli#-installing-tab-
///
/// For details on installing dcli.
///

void main(List<String> args) {
  var parser = ArgParser();
  parser.addFlag(
    'verbose',
    abbr: 'v',
    negatable: false,
    defaultsTo: false,
    help: 'Logs additional details to the cli',
  );

  parser.addFlag(
    'help',
    abbr: 'h',
    negatable: false,
    defaultsTo: false,
    help: 'Shows the help message',
  );

  parser.addFlag(
    'install',
    abbr: 'i',
    negatable: false,
    defaultsTo: false,
    help: 'Install the smcat dependencies',
  );

  var parsed = parser.parse(args);

  if (parsed.wasParsed('help')) {
    showUsage(parser);
  }

  if (parsed.wasParsed('verbose')) {
    Settings().setVerbose(enabled: true);
  }

  if (parsed.wasParsed('install')) {
    install();
    exit(0);
  }

  if (parsed.rest.isEmpty) {
    print(red('You must pass a to path the basename of the smcat file'));
    showUsage(parser);
  }

  generateAll(parsed.rest);
}

void generateAll(List<String> rest) {
  for (var file in rest) {
    if (exists(file)) {
      generate(file);
    } else {
      if (extension(file).isNotEmpty) {
        printerr(red('File $file not found'));
        exit(1);
      }
      var count = 0;
      var pattern = '$file.*.smcat';
      for (file in find(pattern, recursive: false).toList()) {
        generate(file);
      }
      if (count == 0) {
        var one = '$file.smcat';
        if (exists(one)) {
          generate(one);
        } else {
          printerr(orange('No files found that match the pattern: $pattern or $one'));
        }
      }
    }
  }
}

void install() {
  if (which('npm').notfound) {
    print(red('Please install npm and then try again'));
    exit(1);
  }
  'npm install --global state-machine-cat'.start(privileged: true);
}

void generate(String path) {
  print('Generating: ${basenameWithoutExtension(path)}.svg');

  /// 'smcat -T dot $path | dot -T svg > your-machine.svg'.run;
  'smcat $path'.start(
      progress: Progress((stdout) => print(stdout), stderr: (stderr) {
    /// suppress the viz warning:
    /// https://github.com/sverweij/state-machine-cat/issues/127
    if (!stderr.contains('viz.js:33')) print(stderr);
  }));
}

void showUsage(ArgParser parser) {
  print('Usage: ${Script.current.exeName} <base name of myfsm2>\n');
  print('Converts a set of smcat files into svg files.');
  print('If your smcat file has multiple parts due to page breaks then each page will be processed.');
  print(parser.usage);
  exit(1);
}
